<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>Correlation Coefficient Matrix on Self-Survey Question</title>
	<link href="css/bootstrap.min.css" rel="stylesheet" type="text/css"/>
	<style>
		.background {
		  fill: #eee;
		}

		line {
		  stroke: #fff;
		}

		text.active {
		  fill: red;
		}
		
		text {
			font-size:10px;
		}
		
		/*for tooltip*/
		.d3-tip {
		  line-height: 1;
		  font-size: 11px;
		  padding: 5px;
		  background: rgba(0, 0, 0, 0.8);
		  color: #fff;
		  border-radius: 3px;
		}

		/* Creates a small triangle extender for the tooltip */
		.d3-tip:after {
		  box-sizing: border-box;
		  display: inline;
		  font-size: 10px;
		  width: 100%;
		  line-height: 1;
		  color: rgba(0, 0, 0, 0.8);
		  content: "\25BC";
		  position: absolute;
		  text-align: center;
		}

		/* Style northward tooltips differently */
		.d3-tip.n:after {
		  margin: -2px 0 0 0;
		  top: 100%;
		  left: 0;
		}
		
		.hero-unit.panel-title{
			font-size: 11px;
			font-weight: bold;
			margin-bottom:5px;
			line-height: 25px;
			width: 70%;
		}
		
		.row svg {
			display: block;
			margin: 0 auto;
		}

		@media (min-height: 620px) {
			body {
				padding-top: 25px;
			}
			
			.hero-unit {
				padding: 0px 0px;
				margin-top: 10px;
				margin-bottom: 20px;
			}
		}
		
		@media (max-height: 700px) {
			body {
				padding: 0px;
			}
		}
		
		@media (max-height: 620px) {
			body {
				padding: 0px;
			}
			
			.hero-unit {
				padding: 0px 0px;
				margin-top: 0px;
				margin-bottom: 10px;
			}
		}
	
	</style>
	<script src="js/jquery-1.9.1.js"></script>
	<script src="http://d3js.org/d3.v2.min.js?2.8.1"></script>
	<script src="js/d3.tip.min.js"></script>
</head>
<body>
	<div class="container">

		<div class="row">
			<span class="span10 hero-unit"><h4 class="text-center">Correlation Coefficient Matrix on Self-Survey Question</h4></span>
		</div>
		<div class="row">
			<div class="span5" id="an_side" >
				<div class="hero-unit panel-title text-center span3 offset1">Analog</div>
				<div id="containerAN"></div>
			</div>
			<div class="span5" id="di_side" >
				<div class="hero-unit panel-title text-center span3 offset1">Digital</div>

				<div id="containerDI"></div>
				<div id="selector" style="display:none">
					Display Order: <select id="orderDI">
					<option value="-">-</option>
					<option value="name">by Name</option>
					<option value="most">by Most Correlated</option>
					<option value="least">by Least Correlated</option>
					</select>
				</div>
			</div>
		</div>
		<div class="row">
			<div class="span12">
				<div id="selector">
					Display Order: <select id="orderAN">
					<option value="-">-</option>
					<option value="name">by Name</option>
					<option value="most">by Most Correlated</option>
					<option value="least">by Least Correlated</option>
					</select>
				</div>
			</div>
		</div>
		<div class="row">
			<div class= "span5">
				<div class="checkbox">
				  <label>
					<input id="an_graph" type="checkbox" checked onclick="myFunc()">
					Analog Graph
				  </label>
				</div>
			</div>
			<div class="span5">
				<div class="checkbox">
				  <label>
					<input id="di_graph" type="checkbox" checked onclick="myFunc()">
					Digital Graph
				  </label>
				</div>
			</div>			
		</div>

	</div>
	
</body>

<!-- script src="Post-Survey-Performance-Json-Codes-for-Correlation.js"></script -->
<script src="correlation-graph-json-r.js"></script>

<script type="text/javascript">
var tipArray = new Array();
var svgArray = new Array();

var DI_JsonData , AN_JsonData;

function drawChart(graphJsonData, id, width, height)
{
	var margin = {top: 130, right: 70, bottom: 40, left: 115};
	  
	var x = d3.scale.ordinal().rangeBands([0, width]),
	    z = d3.scale.linear().domain([0, 4]).clamp(true),
	    c = d3.scale.category10().domain(d3.range(10));

	var tip = d3.tip()
	  .attr('class', 'd3-tip')
	  .offset([-6, 0])
	  .html(function(p) { return "Correlation: " + p.v + "<br/>P Value: " + p.pValue; });
	
	tipArray.push(tip);

	$('svg').remove('#' + id);

	var svg = d3.select("#container" + id).append("svg")
	    .attr("width", width + margin.left + margin.right)
		.attr("id", id)
	    .attr("height", height + margin.top + margin.bottom)
		/*.style("padding-top", "50px")
		.style("padding-left", "115px")
		.style("padding-bottom", "50px")
		.style("padding-right", "50px")
	    .style("margin-left", margin.left + "px")*/
	    .append("g")
	    .attr("transform", "translate(" + margin.top + "," + margin.left + ")")
		.call(tip);
	svgArray.push(svg);
		
	//get the jsondata and transform it
	var graphData = graphJsonData;

	//get distinct nodes
	var distinctNodes = {};
	var nodesArray = [];
	var nodeId = 0;
	for (var i = 0; i < graphData.length; i ++)
	{
		var data = graphData[i];
		var node = distinctNodes[data["Row Variable"]];
		if (node == null)
		{
			distinctNodes[data["Row Variable"]] = nodeId;
			nodesArray.push({"name":data["Row Variable"], "group":1});
			nodeId++;
		}
	}
	
	//build correlation matrix
	var linksArray = [];
	for (var i = 0; i < graphData.length; i ++)
	{
		var data = graphData[i];
		var rowHead = data["Row Variable"];
		var columnHead = data["Column Variable"];
		var correlation = parseFloat(data["Correlation"]);
		correlation = (correlation + 1.01) / 2.0;
		
		linksArray.push({"source": distinctNodes[rowHead], "target": distinctNodes[columnHead], "value": correlation, "correlation": data["Correlation"], "pValue": data["P-value"]});
	}
	
	//create the transformed data
	var miserables = {"nodes":nodesArray, "links":linksArray};

	var matrix = [],
	      nodes = miserables.nodes,
	      n = nodes.length;

	  // Compute index per node.
	  nodes.forEach(function(node, i) {
	    node.index = i;
	    node.count = 0;
	    matrix[i] = d3.range(n).map(function(j) { return {x: j, y: i, z: 0, v: 0, pValue: 0}; });
	  });

	  // Convert links to matrix; count character occurrences.
	  miserables.links.forEach(function(link) {
	    matrix[link.source][link.target].z += link.value;
		matrix[link.source][link.target].v = link.correlation;
		matrix[link.source][link.target].pValue = link.pValue;
	    //matrix[link.target][link.source].z += link.value;
	    //matrix[link.source][link.source].z += link.value;
	    //matrix[link.target][link.target].z += link.value;
	    nodes[link.source].count += link.value;
	    nodes[link.target].count += link.value;
	  });

	  // Precompute the orders.
	  var orders = {
	    "-": d3.range(n),
	    name: d3.range(n).sort(function(a, b) { return d3.ascending(nodes[a].name, nodes[b].name); }),
	    most: d3.range(n).sort(function(a, b) { return nodes[b].count - nodes[a].count; }),
	    least: d3.range(n).sort(function(a, b) { return nodes[a].count - nodes[b].count; })
	  };

	  // The default sort order.
	  x.domain(orders["-"]);

	  svg.append("rect")
	      .attr("class", "background")
	      .attr("width", width)
	      .attr("height", height);

	  var row = svg.selectAll(".row")
	      .data(matrix)
	    .enter().append("g")
	      .attr("class", "row")
	      .attr("transform", function(d, i) { return "translate(0," + x(i) + ")"; })
	      .each(row);

	  row.append("line")
	      .attr("x2", width);

	  row.append("text")
	      .attr("x", -6)
	      .attr("y", 2 /*x.rangeBand() / 2*/)
	      .attr("dy", ".32em")
	      .attr("text-anchor", "end")
	      .text(function(d, i) { return nodes[i].name; });

	  var column = svg.selectAll(".column")
	      .data(matrix)
	    .enter().append("g")
	      .attr("class", "column")
	      .attr("transform", function(d, i) { return "translate(" + x(i) + ")rotate(-90)"; });

	  column.append("line")
	      .attr("x1", -width);

	  column.append("text")
	      .attr("x", 6)
	      .attr("y", 2 /*x.rangeBand() / 2*/)
	      .attr("dy", ".32em")
	      .attr("text-anchor", "start")
	      .text(function(d, i) { return nodes[i].name; });
	 
	 d3.selectAll("#container" + id + " .column text").attr("transform", "rotate(45)");
	 d3.selectAll("#container" + id + " .row text").attr("transform", "rotate(-45)");
		  
	  function row(row) {
	    var cell = d3.select(this).selectAll(".cell")
	        .data(row.filter(function(d) { return d.z; }))
	      .enter().append("rect")
	        .attr("class", "cell")
	        .attr("x", function(d) { return x(d.x); })
	        .attr("width", x.rangeBand())
	        .attr("height", x.rangeBand())
	        //.style("fill-opacity", function(d) { return z(d.z); })
			.style("fill-opacity", function(d) { return ((d.z <= 0.505) ? 1.01 - 2 *z(4*d.z) : 2 * (z(4*d.z) - 0.505)); })
	        //.style("fill", function(d) { return nodes[d.x].group == nodes[d.y].group ? c(nodes[d.x].group) : null; })
			.style("fill", function(d) { var value = z(d.z);  return (d.z < 0.5) ? "#e51223" : "#2299ee"; })
	        .on("mouseover", mouseover)
	        .on("mouseout", mouseout);
	  }

	  function mouseover(p) {
	    d3.selectAll("#"+ id + " .row text").classed("active", function(d, i) { return i == p.y; });
	    d3.selectAll("#"+ id + " .column text").classed("active", function(d, i) { return i == p.x; });
	
		for (var i = 0; i < tipArray.length; i++)
		{
			tipArray[i].show(p);
		}
	  }

	  function mouseout(p) {
	    d3.selectAll("text").classed("active", false);
		for (var i = 0; i < tipArray.length; i++)
		{
			tipArray[i].hide(p);
		}
	  }

	  d3.select("#order" + id).on("change", function() {
	    clearTimeout(timeout);
	    order(this.value);
		if (id == "AN")
		{
			d3.select("#orderDI").property("selectedIndex", d3.select("#orderAN").property("selectedIndex"));
			var event = document.createEvent("SVGEvents");
			event.initEvent("change",true,true);
			d3.select("#orderDI").node().dispatchEvent(event);
		}
	  });

	  function order(value) {
	    x.domain(orders[value]);

	    var t = svg.transition().duration(2500);

	    t.selectAll(".row")
	        .delay(function(d, i) { return x(i) * 4; })
	        .attr("transform", function(d, i) { return "translate(0," + x(i) + ")"; })
	      .selectAll(".cell")
	        .delay(function(d) { return x(d.x) * 4; })
	        .attr("x", function(d) { return x(d.x); });

	    t.selectAll(".column")
	        .delay(function(d, i) { return x(i) * 4; })
	        .attr("transform", function(d, i) { return "translate(" + x(i) + ")rotate(-90)"; });
	  }

	  var timeout = setTimeout(function() {
	    order("-");
	    d3.select("#order" + id).property("selectedIndex", 0).node().focus();
	  }, 5000);
}

	DI_JsonData = jsonData.data;
	drawChart(jsonData.data,"DI", 400, 400);

</script>


<script src="correlation-graph-an-json-r.js"></script>
<script type="text/javascript">

	AN_JsonData = jsonData.data;
	drawChart(jsonData.data, "AN", 400, 400);

function myFunc() {
	var DI_checked =  $("#di_graph").is(':checked') ? 1 : 0;
	var AN_checked =  $("#an_graph").is(':checked') ? 1 : 0;
	var width=400, height=400;

	$("#di_side").css("float", "left");
	$("#an_side").css("float", "left");

	if (DI_checked == 1){
		$("#di_side").css("display", "block");
	} else {
		$("#di_side").css("display", "none");
	}

	if (AN_checked == 1){
		$("#an_side").css("display", "block");
	} else {
		$("#an_side").css("display", "none");
	}


	if (DI_checked == 1 && AN_checked == 1)
	{
		$("#di_side").removeClass("span12").addClass("span5");
		$("#an_side").removeClass("span12").addClass("span5");		
	} else if (DI_checked == 1)
	{
		$("#di_side").removeClass("span5").addClass("span12");
		$("#di_side").css("float", "none");

		width = 550;
		height = 550;
	} else if (AN_checked == 1)
	{
		$("#an_side").removeClass("span5").addClass("span12");
		$("#an_side").css("float", "none");

		width = 550;
		height = 550;
	}

	drawChart(DI_JsonData,"DI", width, height);
	drawChart(AN_JsonData, "AN", width, height);
}

</script>
</html>