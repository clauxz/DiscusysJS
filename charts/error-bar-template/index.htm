<!DOCTYPE html>
<html>
<head>
	<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Comparing Means using Error Bar</title>
	<link href="../css/bootstrap.min.css" rel="stylesheet" type="text/css"/>
	<script type='text/javascript' src='../js/jquery-1.9.1.js'></script>

		<script src="http://code.jquery.com/ui/1.10.3/jquery-ui.js"></script>

	<style type='text/css'>
		body {
			font-family: "Lucida Grande", "Lucida Sans Unicode", Verdana, Arial, Helvetica, sans-serif;
			color: #274b6d;
			padding-top: 25px;
		}

		.form-horizontal .control-group {
			margin-bottom: 10px;
		}

		.table {
			margin-bottom: 0px;
		}

		.table-condensed td {
			padding: 0px 5px;
			line-height: 15px;
			opacity: 1;
			background-color: #FFFFFF;
			white-space: nowrap;
		}

		.label, .badge {
			font-weight: normal;
			display: block;
		}

		#dataTable {
			position:absolute;
			left:25px;
			top:19px;
			font-size:9px;
			border: 1px solid #999999;
			border-radius: 5px;
			width: 70%;
		}
		
		/*For Freezing the first column and add scroll bar*/
		#dataTable > div {
			overflow-x: auto;
			overflow-y: hidden;
		}

		.freezeColumn {
			position:absolute; 
            width:5em; 
            left:0;
            top:auto;
            border-right: 0px none black; 
			background-color: #49afcd !important;
			color: #ffffff;
		}
		
		#filterDiv {
			padding:15px;
			background-color:#ffffff;
			border:1px solid #3a87ad;
			border-radius:5px;
			color:#555555;
			width:190px;
		}

		#filterList {
			overflow-y: auto;
		}

		#closeGraph{
			color:#555555;
			cursor:pointer;
		}
		
		#closeGraph:hover{
			color:#222222;
			font-weight:bold;
		}

		

			$("#tooltip").css("position", 'absolute');
			$("#tooltip").css("width", '140');
			$("#tooltip").css("backgroundColor", '#EFFCF0');
			$("#tooltip").css("border", 'dashed 1px black');
			$("#tooltip").css("padding", '10px');
			$("#tooltip").css("left", "20%");
			$("#tooltip").css("top", "60%");



		#tooltip {
			position: absolute;
			white-space: nowrap;
			width: 140px;
			background-color: white;
			border: 1px solid black;
			padding: 5px;
			left:20%;
			top:60%

/*			font-family: 'Lucida Grande', 'Lucida Sans Unicode', Verdana, Arial, Helvetica, sans-serif;
			font-size: 11px;
			color: rgb(51, 51, 51);
			left: 5px;
			top: 5px;*/
		}

		@media (min-height: 620px) {
			body {
				padding-top: 25px;
			}
			
			.hero-unit {
				padding: 0px 30px;
				margin-bottom: 20px;
			}

			.hero-unit.side-panel-title{
				font-size: 13px;
				margin-bottom:10px;
			}

			.label, .badge {
				font-size: 11px;
				margin-bottom: 1px;
			}
			
			#plotContainer{
				height:550px;
			}
			
			#closeGraph{
				margin-right:-20px;
			}
			
			#chartContainer {
				height: 350px;
			}
		}
		
		@media (max-height: 700px) {
			body {
				padding: 0px;
			}
		}
		
		@media (max-height: 620px) {
			body {
				padding: 0px;
			}
			
			.hero-unit {
				padding: 0px 20px;
				margin-bottom: 10px;
			}

			.hero-unit.side-panel-title{
				font-size: 11px;
				margin-bottom:5px;
				line-height: 25px;
				padding-right:15px;
			}
			
			h4 {
				font-size: 13px;
				line-height: 13px;
			}
			
			.label, .badge {
				font-size: 10px;
				margin-bottom: 1px;
				padding: 1px 3px;
			}
			
			#plotContainer{
				height:475px;
			}
			
			#closeGraph{
				margin-right:-15px;
			}
			
			#chartContainer {
				height: 300px;
			}
		}
	</style>
	<script type='text/javascript' src='error-bar-json-r.js'></script>
	<script type='text/javascript' src='error-bar-json-chart.js'></script>
	<script type='text/javascript'>

		var tableColumnData = ["Measurement", "Type Short"];
		var tableRowHeader = ["Mean", "SD", "Lower CI", "Upper CI", "P Value"];

		var FILL_COLOR = "#F0F0E0";
		var MEDIAN_COLOR = "#020202";
		var STEM_COLOR = "#040404";
		var BORDER_COLOR = "#444444";
		var WHISKER_COLOR = "#777777";


		//tooltip for normality graph
		/*The tooltip in normality graph should display Skewness, Kurtosis, Shapiro Wilk - W and P value, KS D and P Value*/
		var keyRowForNormality = ["Skewness", "Kurtosis", "KS Test D", "KS Test P Value"];
		var valueForNormality = [];
		
		//variable to hold the chart's handle
		var myChart = null;
		var chartHandle = null;

		//function to change the filter panels dynamically based on the json data
		function initializeFilterPanel() {
			var distinctCategories = {};
			for (var i = 0; i < jsonData.data.length; i++){
				var dataMap = jsonData.data[i];
				var categoryGroup = dataMap["Measurement"];
				distinctCategories[categoryGroup] = 1;
			}

			//create the filter checkboxes as per the categories
			var isFirst = 1;
			for (var key in distinctCategories) {
				if (isFirst == 1){
					//$("#filterDiv").append('<label class="filterItem block label label-success active">' + key + '</label>');
					$("#filterList").append('<label class="filterItem block label label-success active">' + key + '</label>');
					isFirst = 0;
				}
				else
					//$("#filterDiv").append('<label class="filterItem block label inactive">' + key + '</label>');
					$("#filterList").append('<label class="filterItem block label inactive">' + key + '</label>');
			}
		}

		//Function to remove table from the plot
		function removeTableFromPlot() {
			$("#dataTable").remove();
		}

		//Function to draw table in the plot
		function drawTableInPlot() {

			//remove existing table and draw the table
			removeTableFromPlot()
 
			var tableStr = '<div id="dataTable"><div>';
			tableStr += '<table class="table table-hover table-condensed table-striped">';

			var tabularData = [];

			//add column header row
			var filteredJson = getFilteredJson();
			var columnHeader = ["&nbsp;"];
			for (var i = 0; i < filteredJson.length; i++){
				var dataMap = filteredJson[i];
				var header = "";
				for (var j = 0; j < tableColumnData.length; j++){
					header = header + " " + dataMap[tableColumnData[j]];
				}
				columnHeader.push($.trim(header));
			}
			tabularData.push(columnHeader);

			for (var k = 0; k < tableRowHeader.length; k++){
				var tableRow = [];
				tableRow.push($.trim(tableRowHeader[k]));
				
				for (var j = 0; j < filteredJson.length; j++){
					var dataMap = filteredJson[j];
					tableRow.push(dataMap[tableRowHeader[k]]);
				}
				tabularData.push(tableRow);
			}

			for (var i = 0; i < tabularData.length; i++){
				tableStr += "<tr>";
				var dataArray = tabularData[i];
				for (var j = 0; j < dataArray.length; j++)
					if (j == 0)
						tableStr += "<td class='freezeColumn'>" + dataArray[j] + "</td><td style='padding-right:50px;'>&nbsp;</td>";
					else
						tableStr += "<td>" + dataArray[j] + "</td>";
					tableStr += "</tr>";
			}

			tableStr += "</table></div></div>";
			$("div.highcharts-legend").parent().append(tableStr);
			$("div.highcharts-tooltip > span").css({'opacity':1, 'background-color':"#FFFFFF","z-index":100});
		}

		// function to convert median to a triangle
		function drawTriangleInPlot() {

			//remove the box
			$("g.highcharts-series-group").find("path[fill=#FFFFFF]").remove();

			//alert(1);
			//draw the triangle using median line
			$("g.highcharts-series-group").find("path[stroke-width=2]").each(function(index){

					var d = $(this).attr("d");
					var pointArray = d.split(" ");

					//check if the shape is triangle already, (triangle has 8 point length)
					if (pointArray.length > 7)
						return;
					
					var startX = parseFloat(pointArray[1]);
					var endX = parseFloat(pointArray[4]);
					var midX = (startX + endX)/2.0;

					var triangleWidth = endX - startX;
					var startY = parseFloat(pointArray[2]);

					//adjust the Y position so that triangle is in middle
					startY = startY + (triangleWidth/2);
					var endY = startY - triangleWidth;

					var trianglePoints = "M " + startX + " " + startY + " L " + endX + " " + startY + " L " + midX + " " + endY + " L " + startX + " " + startY + " z";
					$(this).attr("d",trianglePoints).attr("shape","triangle");
					$(this).attr("fill", $(this).attr("stroke"));
				});
		}
		
		//Function to remove the numbers in plot
		function removeNumbersFromPlot() {
			$("text.plotNumbers").remove();
		}

		//Function to plot the numbers in the plot
		function drawNumbersInPlot() {

			//remove the earlier plotted numbers
			removeNumbersFromPlot();

			//Find the distance between the plots in the series
			var distanceBetweenPlots = 0;
			var boxWidth = 0;
			var spaceForCharacter = 6; //in pixel
			if ((myChart.series.length > 1) && (myChart.series[0].data.length >= 1))	{
				distanceBetweenPlots = myChart.series[1].data[0].barX - myChart.series[0].data[0].barX;
			}

			for (var i = 0; i < myChart.series.length; i++)
			{
				//show numbers only if the series is visible
				if (!myChart.series[i].visible)
					continue;

				for (var j = 0; j < myChart.series[i].data.length; j++)
				{
					//series color
					var seriesColor = myChart.series[i].color;
					var textColor = myChart.series[0].color.substring(1);
					textColor = "#" + (new Hex(seriesColor)).brightness(-40);

					//find the box's width
					boxWidth = myChart.series[i].data[j].pointWidth + 2;

					//add q1 value in the plot (should be plotted on left side)
					var q1Value = myChart.series[i].data[j].q1;
					var dataLength = ("" + q1Value).length;
					var dataSpaceReq = (dataLength * spaceForCharacter) + 4;

					//find the y-axis corresponding to the value
					var pointY = 0;
					if (myChart.yAxis[0].toValue(pointY) > q1Value)
						while (myChart.yAxis[0].toValue(pointY) > q1Value && !myChart.yAxis[0].toValue(pointY+3) < q1Value)
							pointY+=2;
					else
						while (myChart.yAxis[0].toValue(pointY) < q1Value && !myChart.yAxis[0].toValue(pointY+3) > q1Value)
							pointY+=2;

					//plot the point
					myChart.renderer.text("" + q1Value, myChart.plotLeft + myChart.series[i].data[j].barX - dataSpaceReq, pointY+2).attr({zIndex:5, style:"font-size: 10px;color:" + textColor,class:"plotNumbers"}).add();

					//add max value in the plot
					var maxValue = myChart.series[i].data[j].high;
					dataLength = ("" + maxValue).length;
					dataSpaceReq = (dataLength * spaceForCharacter);

					//find the y-axis corresponding to the value
					pointY = 0;
					if (myChart.yAxis[0].toValue(pointY) > maxValue)
						while (myChart.yAxis[0].toValue(pointY) >= maxValue && !myChart.yAxis[0].toValue(pointY+3) < maxValue)
							pointY+=2;
					else
						while (myChart.yAxis[0].toValue(pointY) <= maxValue && !myChart.yAxis[0].toValue(pointY+3) > maxValue)
							pointY+=2;

					//plot the point
					myChart.renderer.text("" + maxValue, myChart.plotLeft + myChart.series[i].data[j].barX + boxWidth, pointY+2).attr({zIndex:5, style:"font-size: 10px;color:" + textColor,class:"plotNumbers"}).add();

					//add min value in the plot
					var minValue = myChart.series[i].data[j].low;
					dataLength = ("" + minValue).length;
					dataSpaceReq = (dataLength * spaceForCharacter);

					//find the y-axis corresponding to the value
					pointY = 1;
					while (myChart.yAxis[0].toValue(pointY-1) >= minValue && myChart.yAxis[0].toValue(pointY) > minValue)
						pointY+=1;

					//plot the point
					myChart.renderer.text("" + minValue, myChart.plotLeft + myChart.series[i].data[j].barX + boxWidth, pointY+1).attr({zIndex:5, style:"font-size: 10px;color:" + textColor,class:"plotNumbers"}).add();
				}
			}
		}

		//function to close the graph
		function closeGraph(){
			$("#chartContainer").attr("src","").hide();
			$("#chartTitle").hide();
			$("#filterList").animate({"height":"550px"}, 1000, "linear", function(){
				$("#filterList").css("height","100%");
				$("#filterList").css("width","99%");
			});
		}

		//function to load the chart for given measurement & typeShort
		function loadChart(measurement, typeShort){
			//iterate over the chart data and see if there is any chart corresponding to this entry
			var chartURL = "";
			for (var i = 0; i < jsonChartData.data.length; i++)
			{
				var dataMap = jsonChartData.data[i];
				var data = jsonData.data[i];

				if ((dataMap["Measurement"] == measurement) && (dataMap["Type Short"] == typeShort))
				{
					chartURL = dataMap["Chart"];


					for (var j=0; j<4; j++ )
					{
						valueForNormality[j] = data[keyRowForNormality[j]];
					}
				}
			}
			// load/hide the chart
			if ($("#chartContainer").attr("src") == "") {
				$("#chartContainer").attr("src",chartURL);
				$("#filterList").animate({"height":"145px"}, 1000, "linear", function(){
					$("#chartContainer").show(); 
					$("#chartTitle").show();
					$("#filterList").css("width","100%");

				});
			}
			else {
				$("#chartContainer").attr("src",chartURL);
			}
		}

		//function to get the filtered data
		function getFilteredJson() {

			var selectedGroups = [];
			var index = 0;
			$("label.filterItem.active").each(function(){
						selectedGroups[index] = $(this).html();
						index++;
					});
					
			var filteredJsonData = [];
			for (var j = 0; j < selectedGroups.length; j++){
				for (var i = 0; i < jsonData.data.length; i++){
					var dataMap = jsonData.data[i];
					var categoryGroup = dataMap["Measurement"];
					
					if (selectedGroups[j] == categoryGroup) {
						filteredJsonData.push(dataMap);
					}
				}
			}
			return filteredJsonData;
		}
		
		//function to draw the plot based on the filter conditions
		function drawPlot() {

			//destroy the existing chart if any
			if (chartHandle != null)
				chartHandle.destroy();

			var selectedGroups = [];
			var index = 0;
			$("label.filterItem.active").each(function(){
						selectedGroups[index] = $(this).html();
						index++;
					});

			var titleStr = jsonData.title_multiple;
			if (selectedGroups.length == 1)
			{
				titleStr = jsonData.title_singular + selectedGroups[0];
			}
			else
			{
				for (var k = 0; k < selectedGroups.length; k++)
				{
					if (k < (selectedGroups.length-1))
						titleStr = titleStr + selectedGroups[k] + ", ";
					else
						titleStr = titleStr + "& " + selectedGroups[k];
				}
			}

			var filteredCategories = selectedGroups;
			var listData = [];
			var filteredJsonData = getFilteredJson();
			var dataGroups = {};
			var maxValue = 0;
			var minValue = 0;

			for (var j = 0; j < filteredJsonData.length; j++) {
				var dataMap = filteredJsonData[j];
				var dataGroup = dataMap["Type"];

				if (dataGroups[dataGroup] == null){
					dataGroups[dataGroup] = [];
				}

				var dataArray = {};
				dataArray["low"] = parseFloat(dataMap["Lower CI"]);
				dataArray["q1"] = parseFloat(dataMap["Mean"]);
				dataArray["median"] = parseFloat(dataMap["Mean"]);
				dataArray["q3"] = parseFloat(dataMap["Mean"]);
				dataArray["high"] = parseFloat(dataMap["Upper CI"]);
				dataArray["sd"] = parseFloat(dataMap["SD"]);
				dataArray["pValue"] = parseFloat(dataMap["P Value"]);
				dataArray["n"] = parseFloat(dataMap["N"]);
				dataArray["se"] = parseFloat(dataMap["SE of Mean"]);
				dataArray["type"] = dataMap["Type"];
				dataArray["typeShort"] = dataMap["Type Short"];
				dataArray["pairedTTest"] = dataMap["Paired-t Test"];

				if (maxValue < parseFloat(dataMap["Upper CI"]))
					maxValue = parseFloat(dataMap["Upper CI"]);

				if (minValue > parseFloat(dataMap["Lower CI"]))
					minValue = parseFloat(dataMap["Lower CI"]);

				dataGroups[dataGroup].push(dataArray);

				var data = {};
				data["type"] = dataMap["Type"][0];
				data["typeShort"] = dataMap["Type Short"][0];
				data["measurement"] = dataMap["Measurement"][0];
				listData.push(data);
			}

			$("#titleContainer").html(titleStr);
			
			var filteredSeries = [];
			for (var key in dataGroups) {
				var seriesMap = {};
				seriesMap["name"] = key;
				seriesMap["data"] = dataGroups[key];
				filteredSeries.push(seriesMap);
			}

			chartHandle = new Highcharts.Chart({

				chart: {
					renderTo: $('#plotContainer')[0],
					type: 'boxplot',
					marginTop: 90,
					//marginLeft: 10,
					events: {
						click: function(event) {
							//alert('x: '+ event.xAxis[0].value + ', y: ' + event.yAxis[0].value + ' x=' + event.offsetX + ' y=' + event.offsetY);
						},
						redraw: function() {
		                    drawNumbersInPlot();

							//draw triangle in plot
							drawTriangleInPlot();
		                }
					}
				},

				exporting: {
					buttons: {
						contextButton: {
							height: 36,
							width: 36,
							symbol: 'url(../img/plot_print.png)',
							symbolSize: 18,
							symbolX: 18,
							symbolY: 18
						},

						tableButton: {
							x: -42,
							_titleKey: 'tableButtonTitle',
							height: 36,
							width: 36,
							symbolSize: 18,
							symbolX: 18,
							symbolY: 18,
							symbol: 'url(../img/plot_table.png)',
							onclick: function () {
								if ($('g.tableButtonClass').attr("state") == "disabled") {
									drawTableInPlot();
									$('g.tableButtonClass').attr("state","enabled");
								}
								else {
									removeTableFromPlot();
									$('g.tableButtonClass').attr("state", "disabled");
								}
							},
							theme: {
								'class': "tableButtonClass",
								'state': 'disabled'
							}
						},

						numericButton: {
							x: -84,
							_titleKey: 'numericButtonTitle',
							height: 36,
							width: 36,
							symbolSize: 18,
							symbolX: 18,
							symbolY: 18,
							symbol: 'url(../img/plot_numbering.png)',
							onclick: function () {
								if ($('g.numericButtonClass').attr("state") == "disabled") {
									drawNumbersInPlot();
									$('g.numericButtonClass').attr("state","enabled");
								}
								else {
									removeNumbersFromPlot();
									$('g.numericButtonClass').attr("state", "disabled");
								}
							},
							theme: {
								'class': "numericButtonClass",
								'state': 'enabled'
							}
						}

						/*chartButton: {
							x: -126,
							_titleKey: 'chartButtonTitle',
							height: 36,
							width: 36,
							symbolSize: 18,
							symbolX: 18,
							symbolY: 18,
							symbol: 'url(img/plot_chart.png)',
							onclick: function () {
								if ($('g.chartButtonClass').attr("state") == "disabled") {
									$("#leftPanel").show();
									$("#mainPanel").removeClass("offset1").css("margin-left","10px");
									$('g.chartButtonClass').attr("state","enabled");
								}
								else {
									$("#leftPanel").hide();
									$("#mainPanel").addClass("offset1").css("margin-left","");
									$('g.chartButtonClass').attr("state","disabled");
								}
							},
							theme: {
								'class': "chartButtonClass",
								'state': 'disabled'
							}
						}*/
					}
				},

				legend: {
					useHTML: true,
					enabled: true,
					borderWidth: 0
				},

				tooltip: {
					useHTML: true,
					shared: false,
					formatter: function() {
		                return '<em>'+ this.point.category + '</em><br/>' +
								'<span style="color:'+ this.series.color +';font-weight:bold">' + this.series.name + '</span><br/>' +
								'N: ' + this.point.n + '<br/>' +
								'Mean: ' + this.point.median + '<br/>' +
								'SD: ' + this.point.sd + '<br/>' +
								'SE: ' + this.point.se + '<br/>' +
								'Lower CI: ' + this.point.low + '<br/>' +
								'Upper CI: ' + this.point.high + '<br/>' +
								'Paired-t Test: ' + this.point.pairedTTest + '<br/>' +
								'P Value: ' + this.point.pValue;
		            },
					shadow: false,
					positioner: function (labelWidth, labelHeight, point) {
		            	return { x: point.plotX + 25, y: (point.plotY - 70) };
		            },
					style: {
								color: '#333333',
								fontSize: '11px',
								padding: '5px'
					}
				},

				plotOptions: {
					boxplot: {
						stemWidth: 1.2,
						whiskerWidth: 1,
						whiskerLength: "100%",
						point: {
							events: {
								click: function(event) {
									var pointHandle = $(this)[0];
									var measurement = pointHandle.category;
									var typeShort = pointHandle.typeShort;

									loadChart(measurement, typeShort);
								}
							}
						}
					},
					series: {
						dataLabels: {
							enabled: true,
							color: '#444444'
						},
						pointPadding: 0.30,
						groupPadding: 0.05,
						pointWidth: 15
					}
				},

				colors: [
					'#FF5E42',
					'#51B0FF',
					'#FE8D00',
					'#910000',
					'#1aadce',
					'#492970',
					'#f28f43',
					'#77a1e5',
					'#c42525',
					'#a6c96a'
				],

				title: {
					text: ''
				},

				xAxis: {
					categories: filteredCategories,
					title: {
						text: 'Experiment.'
					}
				},

				yAxis: {
					title: {
						text: 'Score'
					},
					endOnTick: false,
					tickPosition: 'inside',
					max: maxValue + ((maxValue - minValue)/3.6)
				},

				series: filteredSeries
			},
			function(chart) { // on complete

					myChart = chart;

					/*
					* All adjustments on top of highcharts
					*/
					//draw triangle in plot
					drawTriangleInPlot();

					//Add click event on the ledgend so that the numbers can be re-rendered when ledgend is clicked
					$(".highcharts-legend").click(function(){setTimeout(drawTriangleInPlot,400);drawNumbersInPlot();});

					//create tabular data and append it to the plot
					//drawTableInPlot();

					//Adding numbers in the plot
					drawNumbersInPlot();

					//To fix the cases when the min value coincides with x-axis
					var yMaxPos = 0;
					$("g.highcharts-series-group").find("path[stroke=" + WHISKER_COLOR + "]").each(function(index){
						var pos = $(this).attr("d").split(" ");
						var yPos = parseInt(pos[pos.length - 1]);

						if (yMaxPos < yPos){
						    yMaxPos = yPos;
							pathHandle = $(this);
						}
					});

					$("g.highcharts-series-group").find("path[stroke=" + WHISKER_COLOR + "]").each(function(index){
						var pos = $(this).attr("d").split(" ");
						if (pos[pos.length - 1] == yMaxPos){
							pos[pos.length - 1] = yMaxPos - 2;
							pos[pos.length - 4] = yMaxPos - 2;
						}
						$(this).attr("d",pos.join(" "));
					});
				}
			);
		}

		$(document).ready(function(){

			//set the title
			$("#titleContainer").html(jsonData.title);
			$("title").html(jsonData.title);
			
			//Initialize the filters in the panel
			initializeFilterPanel();

			//set the titles for the additional buttons
			Highcharts.setOptions({
				lang: {
					numericButtonTitle: "Add/Remove Labels",
					tableButtonTitle: "Add/Remove Table",
					chartButtonTitle: "Add/Remove Charts"
				}
			});

			//Create the chart based on the filters
			$("label.filterItem").bind('click', function () {

				if ($(this).hasClass("active"))
					$(this).removeClass("active").removeClass("label-success")
				else
					$(this).addClass("active").addClass("label-success")
				drawPlot();
			});

			//draw the plot by default
			drawPlot();

			//load the first option by default
			//var optionHandle = $("#chartsList").find("option:first");
			//loadChart(optionHandle.attr("measurement"), optionHandle.attr("typeShort"));
			
			$("#closeGraph").bind('click',closeGraph);

		});

		function showTooltip(title, desc)
		{			
			$("#tooltip").css("display", "block");		


			var str = "";
			for (var i=0;i<4 ; i++)
			{
				str += keyRowForNormality[i] + ":" + valueForNormality[i] + "<br>";
			}						
			
			$("#tooltip").html('<div style="padding-left:10; padding-right:5">' + str + '</div>');
		}

		function hideTooltip()
		{
			$("#tooltip").css("display", 'none');
		}
</script>

</head>
<body>
	<script src="../js/highcharts.js"></script>
	<script src="../js/highcharts-more.js"></script>
	<script src="../js/exporting.js"></script>
	<script src="../js/bootstrap.min.js"></script>
	<script src="../js/colorutils.min.js"></script>
	<div class="container">
		<div class="row">
			<span class="span7 offset2 hero-unit"><h4 id="titleContainer" class="text-center">Comparison of Mean between: variable, variable and variables</h4></span>
		</div>
		<div class="row">
			<div id="leftPanel" class="span2" style="margin-left:0px;">
				<div class="hero-unit side-panel-title">Measurements</div>
				<div id="filterList"></div>
				<div id="chartTitle" class="hero-unit side-panel-title" style="margin-top:10px;margin-bottom:0px;display:none">Normality Graph 
					<span id="closeGraph" class="pull-right">X</span>
				</div>
				
				<img  onMouseOut="hideTooltip()" onMouseOver="showTooltip('Tooltip 2', 'This is 2nd tooltip')" id="chartContainer" src="" style="display:none;" />						
				<div id="tooltip" style="display:none;">					
				</div>
				
			</div>

			<div id="mainPanel" class="span8">
				<div id="plotContainer" style="margin: auto; min-width: 400px; max-width: 1200px"></div>
			</div>
		</div>
	</div>
 </body>
</html>

